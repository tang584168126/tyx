老师：万华军
13541084055
282430644

作业格式
S2T182_唐宇翔――javaoop第一章

第一章：抽象和封装
类是对象的抽象，对象是类的具体（实体）
接受控制台输入
1.导包:import java.util.Scanner;
2.创建扫描器对象
	Scanner sc = new Scanner(System.in);
3.char sex = sc.next().CharAt(0);	

类是一个抽象的过程，叫做“现实模拟”
面向对象的过程，分为三个步骤：
1.发现类
2.发现类的属性
3.发现类的方法

抽象的原则：
注：我们只关心与业务相关的数据

类图：直观，便于理解

构造方法特征：
1.没有返回值类型
2.方法名与类名完全一致
注：系统会默认提供一个无参构造方法
如果自定义构造方法，系统不再提供
在创建对象时，会调用(call,呼叫)相对的构造方法
构造方法的作用：对象的初始化
构造方法的访问修饰符可以为private

构造方法的重载：
1.方法名相同(与类名相同)
2.参数列表不一致
3.与返回值类型和访问修饰符无关

普通方法的重载
1.方法名相同(与类名不相同)
2.参数列表不一致
3.与返回值类型和访问修饰符无关
定义在一个类中

static不能在方法中使用
static修饰的成员（属性和方法），叫做类成员
类属性和类方法
注意事项：
1.静态的资源不能调用非静态的资源

实例变量和实例方法
static可以修饰属性，方法，代码块
静态域:功能：对数据进行加载，只执行一次
static{
		代码块；
}
动态代码块：执行的时机是在构造方法之前，与代码放置的位置无关
{
	//代码
}
静态代码块：优先类执行，只执行一次
static{
	//代码块
}
this ==>这个类
this关键字不能出现在static修饰的方法，静态域中

静态的资源在内存中存在，可以让多个对象去共享

封装：隐藏实现细节，公开外部接口
定义一个类：
1.私有化属性
2.公开getter和setter方法
3.在setter里面验证

setter ==>只写
getter ==> 只读  alt+shift+s+r

创建构造方法 alt+shift+s+o

this调用构造方法时只能写在方法体中第一行

第二章：继承
super 可以调用父类的构造方法，但必须保证是第一行，
super调用父类的属性和普通方法，可以写在方法中的任意行
使用super和this关键字调用构造方法时，只能写在构造方法中的第一行

同包下子类可以访问：public,protected,默认修饰的资源，private修饰的不能访问
不再同包下子类可以访问public,protected修饰的资源，默认的修饰符和private修饰的资源不能访问

protected本类，同包，子类可以访问
public > protected > 默认 > private

子类继承父类后，创建对象，首先加载这个类的父类相对应的构造方法
父类属性 =》父类构造方法 =》 子类属性 =》子类构造方法

构造方法不能继承，因此不能重写

重载：方法名相同，参数列表不一致，与返回值类型和访问修饰符无关，发生的类的关系只有一个
重写：前提必须有继承关系，子类重新父类的方法，方法名相同，参数列表相同，返回值类型相同或是其子类(父类中返回值类型的子类)，访问修饰符不能严于父类
发生在有父类和子类的关系

有抽象方法的类是抽象类（接口），抽象类不一定具有抽象方法，抽象方法无方法体，子类必须重写父类抽象方法，否则子类也是抽象类

final的使用：修饰类：太监类，工具类：String Integer
	方法：最终的方法，不能被重写
	变量：常量
final 修饰类的对象 final Dog = new Dog(); 对象不能被重写赋值，对象属性可以重新赋值	

第三章：多态
实现多态的两种方式：
1.向上转型
2.向下转型

实现多态条件：1.子类重写父类方法	2.使用父类类型来创建子类实例		父类 对象 = 子类 实例 Pet pet = new Dog();

父类不能调用子类特有的方法

反射机制

第四章：接口
1.接口是一种功能
2.接口是一种约定
3.什么时使用接口
有has a的关系，可以优先考虑使用接口编程

接口是由interface修饰，在接口中定义的方法都是抽象方法，在接口中定义的变量都是静态常量，接口可以继承多个接口
C#中接口不能包含字段，可以定义属性，但是实现类必须实现这个接口成员，定义抽象方法，都不能显示使用访问修饰符

第五章：QuickHit开发步骤：
1.编写游戏等级类:Level
		等级编号：levelNo
		字符串长度：strLength
		正确输入的次数：strTime
		正确输入一次的得分：perScore
		每个等级的时间限制：timeLimit
2.设置等级管理类:LevelParam
		等级：LEVELS
		fianl static Level LEVELS = new LEVEL[6];
		//加载
		static{}
3.玩家类
4.游戏类		
		
		
第六章：异常
try-catch-finally:finally的代码块都会执行，只有一种情况除外(在执行finally代码块之前加上System.exit(1),finally代码块就不会执行)	

try catch finally
组合方式：
try-catch
try-catch-finally
try-finally	
try-catch-catch-finally:多重try-call:先子类，再父类

抛出异常throw要与throws组合使用

异常分为两大类
1.检查型异常(Checked)：必须处理，否则编译不会通过
2.运行时异常(Runtime)：可以处理，但是不能预防异常，只有在程序运行时才有可能出现异常

注意：输出级别的优先级，如果不能获取日志信息，那么在配置文件中设置的输出级别要低一些（或者相同）


JAVA命名规范
1.包名：全部字母小写
2.类名：首字母小写，第二个单词的大写，帕斯卡命名法
3.变量名：只能包含_,$.数字，字母，不能以数字开头，不能包含java关键字或保留字，骆驼命名法
4.静态常量：全部大写

第七章：集合框架
Collection:不唯一，无序
List:不唯一，有序
Set：唯一，无序

ArrayList:优点遍历和随机访问效率高，缺点：添加和删除元素效率低一些
LinkedList:缺点：随机访问和遍历效率低，优点：添加和删除元素效率高

集合框架好处：
1.动态存储，长度可变
2.可以存储任意数据类型的数据

泛型的使用
1.限制集合的元素类型，保证数据安全性
2.避免操作元素时，避免进行数据类型转换

集合使用泛型，迭代器也可以使用泛型

基本数据类型的包装类
byte 	Byte
char 	Character
short	Short
int		integer
long	Long
float	Float
double	Double
boolean	Boolean

第八章：JDBC
对数据进行操作：1.增删改，更新数据库2.查询

使用JDBC操作数据库的步骤：
1.导入jar包，并且正确部署
2.加载驱动
	Class.forName("驱动字符串");
3.创建连接数据库的对象			String url = "jdbc:sqlserver://localhost:1433;DataBaseName=epet";			exec sp_readerrorlog 0,1,'listening'
	Connection conn= DriverManager.getConnection(参数);
4.创建SQL语句
	String sql= "";
5.创建执行SQL语句的对象
	Statement st = conn.CreateStatement();	
6.执行SQL语句，并且接收执行结果
	1.增删改
		int result = st.executeUpdate(sql);		//返回的是受影响的行数
	2.查询
	ResultSet rs = 
		st.executeQuery(sql);						//返回的是结果集
7.对返回结果进行处理
	1.if(result >0){//成功}
	2.while(rs.next){
		//获取结果集中表的数据
		rs.get***("字段名");注意：一般情况，表中数据类型与get***相对应，日期除外(getString("日期"))
	}
8.释放资源(先使用的后关闭，后使用的先关闭)

连接数据库出现异常的解决方案
1.检查JDBC的jar包师傅导入，并且部署
2.是否加载驱动
3.连接数据库的url,user,password是否正确
url:字符串是否正确；端口是否正确，数据库名user:是否被授权；password是否正确
4.检查数据库服务是否开启


Class9：数据库访问层
持久化：将瞬态变成持久态的过程
DAO组成部分：
1.DAO接口
2.DAO实现类
3.实体类
4.数据库的连接和关闭（BaseDao类）

分层的原则：
1.封装原则
2.顺序访问原则
分层特点
1.商城访问下一次，下一层不能访问上一层
2.不能跨层访问

分层好处
1.只关注自己的这一层，提高质量
2.分层开发，便于分工协作，提高效率
3.提供代码的重用
4.便于功能的维护和扩展

使用分层开发步骤：
1.创建BaseDao类
2.根据业务定义接口
3.根据业务定义实现类
4.测试


Class10:File I/O
读数据：从文件到内存(用软件打开文件)
写文件：将内存中数据写入文件(保存文件)

I/O流
1.按流向分类
		1.1输出流
		1.2输入流
2.按数据单元分类
		2.1字节流
				字节输入流(读)：FileInputStream
					read();read(byte[])
				字节输出流(写)：FileOutputStream
					write();write(byte[])
						flush();
		2.2字符流
				